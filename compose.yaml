version: '3.9'
services:

  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
    environment:
      - ADMIN_USERNAME=$ADMIN_USERNAME
      - ADMIN_PASSWORD=$ADMIN_PASSWORD
      - APP_ENV=$APP_ENV
      - PORTAINER_PORT=8443
      - PROXY_X_FOR_PROTO=$PROXY_X_FOR_PROTO
      - REDIS_HOST=redis
      - SECRET_KEY=$SECRET_KEY
      - SENTRY_DSN=$SENTRY_DSN
      - SERVICE_NAME=web
      - WARNING_FILTERS=$WARNING_FILTERS
    volumes:
      - app_data:/app/data
    logging:
      driver: local
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: curl -f -sS -m 10 http://localhost:8000/ >/dev/null || exit 1
    deploy:
      resources:
        limits:
          memory: 256m

  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    environment:
      - APP_ENV=$APP_ENV
      - NGINX_HOST=nginx  # for the health_check job
      - REDIS_HOST=redis
      - SENTRY_DSN=$SENTRY_DSN
      - SERVICE_NAME=worker
    volumes:
      - app_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    logging:
      driver: local
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: for ip in $(awk '/32 host/ {print f} {f=$2}' </proc/net/fib_trie | sort | uniq); do rq info -W -u redis://$$REDIS_HOST?socket_timeout=5 | fgrep $$ip | egrep '(idle|busy)' >/dev/null && break; done || exit 1
    deploy:
      resources:
        limits:
          memory: 2g

  scheduler:
    build:
      context: .
      dockerfile: docker/scheduler/Dockerfile
    environment:
      - RQ_REDIS_URL=redis://redis?socket_timeout=5
    logging:
      driver: local
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: python -c 'import os; import sys; import socket; import redis; ip = socket.gethostbyname(socket.gethostname()); cl = redis.Redis.from_url(os.environ["RQ_REDIS_URL"]).client_list(); any([c["addr"].split(":")[0] == ip for c in cl]) or sys.exit(1)' || exit 1
    deploy:
      resources:
        limits:
          memory: 128m

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    volumes:
      - ./conf/ssl:/etc/nginx/ssl:ro
      - ./static/images:/app/static/images:ro
    ports:
      - '443:443'
    logging:
      driver: local
    depends_on:
      - web
    restart: always
    healthcheck:
      test: curl -f -sS -m 10 http://localhost/static/picstylist.css >/dev/null || exit 1
    deploy:
      resources:
        limits:
          memory: 128m

  redis:
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
    volumes:
      - redis_data:/data
    logging:
      driver: local
    restart: always
    healthcheck:
      test: timeout 5 redis-cli ping >/dev/null || exit 1
    deploy:
      resources:
        limits:
          memory: 128m

volumes:
  app_data:
  redis_data:
