version: '3.9'
services:

  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
    environment:
      - APP_ENV=${APP_ENV}
      - PROXY_X_FOR_PROTO=${PROXY_X_FOR_PROTO}
      - REDIS_HOST=redis
      - RQ_DASHBOARD_USERNAME=${RQ_DASHBOARD_USERNAME}
      - RQ_DASHBOARD_PASSWORD=${RQ_DASHBOARD_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - SERVICE_NAME=web
    volumes:
      - app_data:/app/data
    logging:
      driver: local
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: curl -f -sS -m 10 http://localhost:8000/ >/dev/null || exit 1
    deploy:
      resources:
        limits:
          memory: 256m

  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    environment:
      - APP_ENV=${APP_ENV}
      - NGINX_HOST=nginx  # for healthcheck
      - REDIS_HOST=redis
      - SENTRY_DSN=${SENTRY_DSN}
      - SERVICE_NAME=worker
    volumes:
      - app_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    logging:
      driver: local
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: for ip in $(awk '/32 host/ {print f} {f=$2}' </proc/net/fib_trie | sort | uniq); do rq info -W | fgrep $$ip | egrep '(idle|busy)' >/dev/null && exit; done; exit 1
    deploy:
      resources:
        limits:
          memory: 2g

  scheduler:
    build:
      context: .
      dockerfile: docker/scheduler/Dockerfile
    environment:
      - RQ_REDIS_HOST=redis
    logging:
      driver: local
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: python -c 'import os; import sys; import socket; import redis; ip = socket.gethostbyname(socket.gethostname()); cl = redis.Redis(host=os.environ["RQ_REDIS_HOST"]).client_list(); any([c["addr"].split(":")[0] == ip for c in cl]) or sys.exit(1)' || exit 1
    deploy:
      resources:
        limits:
          memory: 128m

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    volumes:
      - ./conf/ssl:/etc/nginx/ssl:ro
      - ./static/images:/app/static/images:ro
    ports:
      - '443:443'
    logging:
      driver: local
    depends_on:
      - web
    restart: always
    healthcheck:
      test: curl -f -sS -m 10 http://localhost/static/picstylist.css >/dev/null || exit 1
    deploy:
      resources:
        limits:
          memory: 128m

  redis:
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
    volumes:
      - redis_data:/data
    logging:
      driver: local
    restart: always
    healthcheck:
      test: redis-cli ping >/dev/null
    deploy:
      resources:
        limits:
          memory: 128m

volumes:
  app_data:
  redis_data:
